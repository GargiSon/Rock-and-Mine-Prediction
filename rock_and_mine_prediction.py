# -*- coding: utf-8 -*-
"""Rock and Mine Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R0wHS3VdJfiBJTAFgXAdV3beItE-IBI_

Importing the Dependencies
"""

import numpy as np #used for making array
import pandas as pd # used for making dataframe
from sklearn.model_selection import train_test_split #to split data into train and test
from sklearn.linear_model import LogisticRegression #importing logistic regression model
from sklearn.metrics import accuracy_score #importing accuracy score

"""Data Collection and Data Processing"""

#loading the dataset to a pandas Dataframe
sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header = None)

sonar_data.head()

#number of rows and cols
sonar_data.shape  #representing 60 features and one label

sonar_data.describe()  #describe  ---> statistical measures of the data

sonar_data[60].value_counts() #counting rock and mine data found almost equal

"""M --> Mine

R --> Rock
"""

sonar_data.groupby(60).mean()  #mean values

# Separating data and Labels
X = sonar_data.drop(columns = 60, axis = 1) #features
Y = sonar_data[60] #labels

print(X)
print(Y)

"""Training and Test data"""

x_train, x_test,y_train, y_test = train_test_split(X, Y, test_size = 0.1, stratify= Y,random_state=1) #spliting data into training and test files

print(X.shape, x_train.shape, x_test.shape)

print(x_train)
print(y_train)

"""Model Training --> Logistic Regression"""

model = LogisticRegression() #loading logistic regression model in variable model

#training the Logistic Regression model with trining  data
model.fit(x_train, y_train)

"""Model Evaluation"""

#accuary on training data
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy on training data: ',training_data_accuracy)

#accuary on test data
x_test_prediction = model.predict(x_test)
test_data_accuarcy = accuracy_score(x_test_prediction, y_test)

print('Accuracy on test data: ',test_data_accuarcy)

"""Making a predicted System"""

input_data = (0.0130,0.0120,0.0436,0.0624,0.0428,0.0349,0.0384,0.0446,0.1318,0.1375,0.2026,0.2389,0.2112,0.1444,0.0742,0.1533,0.3052,0.4116,0.5466,0.5933,0.6663,0.7333,0.7136,0.7014,0.7758,0.9137,0.9964,1.0000,0.8881,0.6585,0.2707,0.1746,0.2709,0.4853,0.7184,0.8209,0.7536,0.6496,0.4708,0.3482,0.3508,0.3181,0.3524,0.3659,0.2846,0.1714,0.0694,0.0303,0.0292,0.0116,0.0024,0.0084,0.0100,0.0018,0.0035,0.0058,0.0011,0.0009,0.0033,0.0026)
# changing the input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 'R'):
  print('The object is a Rock')
else:
  print('The object is a Mine')

